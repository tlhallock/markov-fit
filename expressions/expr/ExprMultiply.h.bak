/*
 * ExprMultiply.h
 *
 *  Created on: Apr 1, 2016
 *      Author: thallock
 */

#ifndef EXPR_EXPRMULTIPLY_H_
#define EXPR_EXPRMULTIPLY_H_

#include "ExpressionRename.h"

#include <list>

class ExprMultiply : public ExpressionRename {

private:
	std::list<ExpressionRename *> matrices;
	std::list<ExpressionRename *> scalars;

public:
	ExprMultiply();
	ExprMultiply(ExpressionRename* l, ExpressionRename* r);
	virtual ~ExprMultiply();


	ExpressionRename* clone() const;
	ExpressionRename* differentiate(const int variable) const;
	expr_type get_type() const;
	ExpressionRename* simplify(const SimplificationRules& rules = SimplificationRules{});
	ExpressionRename* substitute(const Dictionary& dictionary) const;
	Result* evaluate() const;
	void print(std::ostream& out, int indentation, const ExpressionOutputFlags& flags = ExpressionOutputFlags{}) const;
	bool contains_variable(int variable) const;
	void get_resulting_dimensions(int& m, int& n) const;

	void multiply(const ExpressionRename *expr);
};

#endif /* EXPR_EXPRMULTIPLY_H_ */
